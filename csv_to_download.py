from pytube import YouTube, Search

import pandas as pd
import time
import re

import argparse

def create_filename(artists, title):
    filename = ""
    all_artist = artists.split(",")
    
    if len(all_artist) > 2:
        all_artist = ",".join(all_artist[:2])+"..."
    else:
        all_artist = ",".join(all_artist[:2])
    
    filename +=all_artist


    to_remove = "[<>:\/\\|\?\*]"
    expr = re.compile(to_remove)
    clean_title = re.sub(expr,"_",title)

    filename+= "_"+clean_title
    return filename

def main(args):
    print("Start process")

    output_path = args.output
    csv_file = args.csv_file

    if csv_file is None:
        print("Please use --csv_file command in order to have to data")
        return ""
    
    if output_path is None:
        print("Please use --output command in order to have to data")
        return ""
    
    
    df = pd.read_csv(csv_file,sep = '\t')
    
    nb_song = len(df)

    if 'downloaded' not in df.columns:
        df["downloaded"] = [False for i in range(nb_song)]
    
    if 'video_id' not in df.columns:
        df["video_id"] = ["" for i in range(nb_song)] #if you want to generate playlist for youtube or know where it's come from

    #add colummn for youtube link
    #df.insert(3, column="ytb_link", value=["" for i in range(nb_song)])

    for ind in df.index:
        curr_donwloaded = df["downloaded"][ind]

        if  not curr_donwloaded:
            curr_artist = df["artist"][ind]
            curr_title = df["title"][ind]
            #print(f"proccessing {curr_artist} -- {curr_title}")
            
            to_find = curr_artist + " " + curr_title 
            s = Search(to_find+ " Auto-generated by YouTube")
            best_search = s.results[0]
            str_f = best_search.streams.filter(only_audio=True).order_by("abr").desc().first()
            #filename = best_search.title + " " + best_search.author
            try:
                filename = create_filename(curr_artist,curr_title)
                str_f.download(output_path = output_path, filename = filename+".mp3", max_retries=300)
                df.loc[ind,"downloaded"] = True
                #df.loc[ind,"ytb_link"] = f"https://www.youtube.com/watch?v={best_search.video_id}"
                df.loc[ind,"video_id"] = best_search.video_id
                print(f"Succes of {filename[:50]}")
            except:
                print(f"Download failed")

    df.to_csv(csv_file,sep = '\t',index=False)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Dowload song frim csv.file')
    parser.add_argument("--output",type=str, help="Output path where songs will be downloaded")
    parser.add_argument("--csv_file",type=str, help="Csv file path containg song infos [name of artists (if many artist : sperate them with \",\"), title]")
    args = parser.parse_args()
    main(args)